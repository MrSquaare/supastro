SET 
  statement_timeout = 0;
SET 
  lock_timeout = 0;
SET 
  idle_in_transaction_session_timeout = 0;
SET 
  client_encoding = 'UTF8';
SET 
  standard_conforming_strings = on;
SELECT 
  pg_catalog.set_config('search_path', '', false);
SET 
  check_function_bodies = false;
SET 
  xmloption = content;
SET 
  client_min_messages = warning;
SET 
  row_security = off;
CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";
COMMENT ON SCHEMA "public" IS 'standard public schema';
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
CREATE TYPE "public"."party_status" AS ENUM ('OPEN', 'RUNNING', 'CLOSE');
ALTER TYPE "public"."party_status" OWNER TO "postgres";
CREATE 
OR REPLACE FUNCTION "public"."party_data_decrement"(
  "party_id_arg" bigint, "name_arg" "text"
) RETURNS "void" LANGUAGE "sql" AS $$insert into parties_data (party_id, name, value) 
values 
  (party_id_arg, name_arg, '0') on conflict (party_id, name) do 
update 
set 
  value = (
    greatest(
      (parties_data.value :: int - 1), 
      0
    )
  ):: text$$;
ALTER FUNCTION "public"."party_data_decrement"(
  "party_id_arg" bigint, "name_arg" "text"
) OWNER TO "postgres";
CREATE 
OR REPLACE FUNCTION "public"."party_data_increment"(
  "party_id_arg" bigint, "name_arg" "text"
) RETURNS "void" LANGUAGE "sql" AS $$insert into parties_data (party_id, name, value) 
values 
  (party_id_arg, name_arg, '1') on conflict (party_id, name) do 
update 
set 
  value = (
    (parties_data.value :: int + 1)
  ):: text$$;
ALTER FUNCTION "public"."party_data_increment"(
  "party_id_arg" bigint, "name_arg" "text"
) OWNER TO "postgres";
CREATE 
OR REPLACE FUNCTION "public"."party_player_data_decrement"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) RETURNS "void" LANGUAGE "sql" AS $$insert into parties_players_data (party_id, player_id, name, value) 
values 
  (
    party_id_arg, player_id_arg, name_arg, 
    '1'
  ) on conflict (party_id, player_id, name) do 
update 
set 
  value = (
    greatest(
      (
        parties_players_data.value :: int - 1
      ), 
      0
    )
  ):: text$$;
ALTER FUNCTION "public"."party_player_data_decrement"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) OWNER TO "postgres";
CREATE 
OR REPLACE FUNCTION "public"."party_player_data_increment"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) RETURNS "void" LANGUAGE "sql" AS $$insert into parties_players_data (party_id, player_id, name, value) 
values 
  (
    party_id_arg, player_id_arg, name_arg, 
    '1'
  ) on conflict (party_id, player_id, name) do 
update 
set 
  value = (
    (
      parties_players_data.value :: int + 1
    )
  ):: text$$;
ALTER FUNCTION "public"."party_player_data_increment"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) OWNER TO "postgres";
SET 
  default_tablespace = '';
SET 
  default_table_access_method = "heap";
CREATE TABLE IF NOT EXISTS "public"."parties" (
  "id" bigint NOT NULL, 
  "created_at" timestamp with time zone DEFAULT "now"() NOT NULL, 
  "name" "text" NOT NULL, 
  "password" "text" NOT NULL, 
  "status" "public"."party_status" DEFAULT 'OPEN' :: "public"."party_status" NOT NULL
);
ALTER TABLE 
  "public"."parties" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."parties_data" (
  "id" bigint NOT NULL, 
  "created_at" timestamp with time zone DEFAULT "now"() NOT NULL, 
  "party_id" bigint NOT NULL, 
  "name" "text" NOT NULL, 
  "value" "text" NOT NULL
);
ALTER TABLE 
  "public"."parties_data" OWNER TO "postgres";
ALTER TABLE 
  "public"."parties_data" ALTER COLUMN "id" 
ADD 
  GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."parties_data_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
ALTER TABLE 
  "public"."parties" ALTER COLUMN "id" 
ADD 
  GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."parties_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
CREATE TABLE IF NOT EXISTS "public"."parties_players" (
  "id" bigint NOT NULL, 
  "created_at" timestamp with time zone DEFAULT "now"() NOT NULL, 
  "user_id" "uuid" NOT NULL, 
  "name" character varying, 
  "avatar_id" "text", 
  "party_id" bigint NOT NULL
);
ALTER TABLE 
  "public"."parties_players" OWNER TO "postgres";
CREATE TABLE IF NOT EXISTS "public"."parties_players_data" (
  "id" bigint NOT NULL, 
  "created_at" timestamp with time zone DEFAULT "now"() NOT NULL, 
  "party_id" bigint NOT NULL, 
  "player_id" bigint NOT NULL, 
  "name" "text" NOT NULL, 
  "value" "text" NOT NULL
);
ALTER TABLE 
  "public"."parties_players_data" OWNER TO "postgres";
ALTER TABLE 
  "public"."parties_players_data" ALTER COLUMN "id" 
ADD 
  GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."parties_players_data_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
ALTER TABLE 
  "public"."parties_players" ALTER COLUMN "id" 
ADD 
  GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."parties_players_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
ALTER TABLE 
  ONLY "public"."parties_data" 
ADD 
  CONSTRAINT "parties_data_party_id_name_key" UNIQUE ("party_id", "name");
ALTER TABLE 
  ONLY "public"."parties_data" 
ADD 
  CONSTRAINT "parties_data_pkey" PRIMARY KEY ("id");
ALTER TABLE 
  ONLY "public"."parties" 
ADD 
  CONSTRAINT "parties_pkey" PRIMARY KEY ("id");
ALTER TABLE 
  ONLY "public"."parties_players_data" 
ADD 
  CONSTRAINT "parties_players_data_party_id_player_id_name_key" UNIQUE ("party_id", "player_id", "name");
ALTER TABLE 
  ONLY "public"."parties_players_data" 
ADD 
  CONSTRAINT "parties_players_data_pkey" PRIMARY KEY ("id");
ALTER TABLE 
  ONLY "public"."parties_players" 
ADD 
  CONSTRAINT "parties_players_pkey" PRIMARY KEY ("id");
ALTER TABLE 
  ONLY "public"."parties_players" 
ADD 
  CONSTRAINT "parties_players_user_id_key" UNIQUE ("user_id");
ALTER TABLE 
  ONLY "public"."parties_data" 
ADD 
  CONSTRAINT "parties_data_party_id_fkey" FOREIGN KEY ("party_id") REFERENCES "public"."parties"("id") ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE 
  ONLY "public"."parties_players_data" 
ADD 
  CONSTRAINT "parties_players_data_party_id_fkey" FOREIGN KEY ("party_id") REFERENCES "public"."parties"("id") ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE 
  ONLY "public"."parties_players_data" 
ADD 
  CONSTRAINT "parties_players_data_player_id_fkey" FOREIGN KEY ("player_id") REFERENCES "public"."parties_players"("id") ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE 
  ONLY "public"."parties_players" 
ADD 
  CONSTRAINT "parties_players_party_id_fkey" FOREIGN KEY ("party_id") REFERENCES "public"."parties"("id") ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE 
  ONLY "public"."parties_players" 
ADD 
  CONSTRAINT "parties_players_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;
CREATE POLICY "Enable select for all users" ON "public"."parties" FOR 
SELECT 
  USING (true);
CREATE POLICY "Enable select for authenticated users only" ON "public"."parties_data" FOR 
SELECT 
  TO "authenticated" USING (true);
CREATE POLICY "Enable select for authenticated users only" ON "public"."parties_players" FOR 
SELECT 
  TO "authenticated" USING (true);
CREATE POLICY "Enable select for authenticated users only" ON "public"."parties_players_data" FOR 
SELECT 
  TO "authenticated" USING (true);
ALTER TABLE 
  "public"."parties" ENABLE ROW LEVEL SECURITY;
ALTER TABLE 
  "public"."parties_data" ENABLE ROW LEVEL SECURITY;
ALTER TABLE 
  "public"."parties_players" ENABLE ROW LEVEL SECURITY;
ALTER TABLE 
  "public"."parties_players_data" ENABLE ROW LEVEL SECURITY;
ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";
ALTER PUBLICATION "supabase_realtime" 
ADD 
  TABLE ONLY "public"."parties";
ALTER PUBLICATION "supabase_realtime" 
ADD 
  TABLE ONLY "public"."parties_data";
ALTER PUBLICATION "supabase_realtime" 
ADD 
  TABLE ONLY "public"."parties_players";
ALTER PUBLICATION "supabase_realtime" 
ADD 
  TABLE ONLY "public"."parties_players_data";
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT ALL ON FUNCTION "public"."party_data_decrement"(
  "party_id_arg" bigint, "name_arg" "text"
) TO "anon";
GRANT ALL ON FUNCTION "public"."party_data_decrement"(
  "party_id_arg" bigint, "name_arg" "text"
) TO "authenticated";
GRANT ALL ON FUNCTION "public"."party_data_decrement"(
  "party_id_arg" bigint, "name_arg" "text"
) TO "service_role";
GRANT ALL ON FUNCTION "public"."party_data_increment"(
  "party_id_arg" bigint, "name_arg" "text"
) TO "anon";
GRANT ALL ON FUNCTION "public"."party_data_increment"(
  "party_id_arg" bigint, "name_arg" "text"
) TO "authenticated";
GRANT ALL ON FUNCTION "public"."party_data_increment"(
  "party_id_arg" bigint, "name_arg" "text"
) TO "service_role";
GRANT ALL ON FUNCTION "public"."party_player_data_decrement"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) TO "anon";
GRANT ALL ON FUNCTION "public"."party_player_data_decrement"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) TO "authenticated";
GRANT ALL ON FUNCTION "public"."party_player_data_decrement"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) TO "service_role";
GRANT ALL ON FUNCTION "public"."party_player_data_increment"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) TO "anon";
GRANT ALL ON FUNCTION "public"."party_player_data_increment"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) TO "authenticated";
GRANT ALL ON FUNCTION "public"."party_player_data_increment"(
  "party_id_arg" bigint, "player_id_arg" bigint, 
  "name_arg" "text"
) TO "service_role";
GRANT ALL ON TABLE "public"."parties" TO "anon";
GRANT ALL ON TABLE "public"."parties" TO "authenticated";
GRANT ALL ON TABLE "public"."parties" TO "service_role";
GRANT ALL ON TABLE "public"."parties_data" TO "anon";
GRANT ALL ON TABLE "public"."parties_data" TO "authenticated";
GRANT ALL ON TABLE "public"."parties_data" TO "service_role";
GRANT ALL ON SEQUENCE "public"."parties_data_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."parties_data_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."parties_data_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "public"."parties_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."parties_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."parties_id_seq" TO "service_role";
GRANT ALL ON TABLE "public"."parties_players" TO "anon";
GRANT ALL ON TABLE "public"."parties_players" TO "authenticated";
GRANT ALL ON TABLE "public"."parties_players" TO "service_role";
GRANT ALL ON TABLE "public"."parties_players_data" TO "anon";
GRANT ALL ON TABLE "public"."parties_players_data" TO "authenticated";
GRANT ALL ON TABLE "public"."parties_players_data" TO "service_role";
GRANT ALL ON SEQUENCE "public"."parties_players_data_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."parties_players_data_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."parties_players_data_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "public"."parties_players_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."parties_players_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."parties_players_id_seq" TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";
RESET ALL;
